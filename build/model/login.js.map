{"version":3,"sources":["../../src/model/login.js"],"names":["connection","createConnection","host","port","user","password","database","insecureAuth","connect","err","userLogin","info","cb","query","userName","result","length","code","personage","msg","Logon","nickname","email","phone","details","payload","uid","name","listData"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,gBAAMC,gBAAN,CAAuB;AACtCC,UAAM,WADgC;AAEtCC,UAAM,IAFgC;AAGtCC,UAAM,MAHgC;AAItCC,cAAU,QAJ4B;AAKtCC,cAAU,MAL4B;AAMtCC,kBAAc;AANwB,CAAvB,CAAnB;;AASAP,WAAWQ,OAAX,CAAoB,eAAO;AACvB,QAAGC,GAAH,EAAQ;AACJ,cAAMA,GAAN;AACH;AACJ,CAJD;;AAMA,IAAMC,YAAY,SAAZA,SAAY,CAACC,IAAD,EAAOC,EAAP,EAAc;AAC5BZ,eAAWa,KAAX,CAAiB,qCAAjB,EAAwD,CAACF,KAAKG,QAAN,CAAxD,EAAyE,UAACL,GAAD,EAAMM,MAAN,EAAiB;AACtF,YAAGA,OAAOC,MAAP,KAAkB,CAArB,EAAwB;AACpB,gBAAGD,OAAO,CAAP,EAAUV,QAAV,KAAuBM,KAAKN,QAA/B,EAAyC;AACrCO,mBAAG;AACCK,0BAAM,CADP;AAECC,+BAAWH,OAAO,CAAP,CAFZ;AAGCI,yBAAK;AAHN,iBAAH;AAKH,aAND,MAMO;AACHP,mBAAG;AACCK,0BAAM,CADP;AAECE,yBAAK;AAFN,iBAAH;AAIH;AACJ,SAbD,MAaO;AACHP,eAAG;AACCK,sBAAM,CADP;AAECE,qBAAK;AAFN,aAAH;AAIH;AACJ,KApBD;AAqBH,CAtBD;;AAwBA,IAAMC,QAAQ,SAARA,KAAQ,CAACT,IAAD,EAAOC,EAAP,EAAc;AACxBZ,eAAWa,KAAX,CAAiB,qCAAjB,EAAwD,CAACF,KAAKU,QAAN,CAAxD,EAAyE,UAACZ,GAAD,EAAMM,MAAN,EAAiB;AACvF,YAAGA,OAAOC,MAAP,KAAkB,CAArB,EAAuB;AACnBhB,uBAAWa,KAAX,sEAAsF,CAACF,KAAKU,QAAN,EAAeV,KAAKN,QAApB,EAA6BM,KAAKW,KAAlC,EAAwCX,KAAKY,KAA7C,CAAtF,EAA4I,UAACd,GAAD,EAAMM,MAAN,EAAiB;AACzJH,mBAAG;AACCK,0BAAM,CADP;AAECE,yBAAK;AAFN,iBAAH;AAIH,aALD;AAMH,SAPD,MAOQ;AACJP,eAAG;AACCK,sBAAM,CADP;AAECE,qBAAK;AAFN,aAAH;AAIH;AACH,KAdD;AAeH,CAhBD;;AAkBA,IAAMK,UAAU,SAAVA,OAAU,CAACC,OAAD,EAAUb,EAAV,EAAiB;AAC/BA,OAAG;AACDc,aAAKD,QAAQC,GADZ;AAEDC,cAAMF,QAAQE,IAFb;AAGDC;AAHC,KAAH;AAKD,CAND;;QASIlB,S,GAAAA,S;QACAU,K,GAAAA,K;QACAI,O,GAAAA,O","file":"login.js","sourcesContent":["import mysql from 'mysql';\nimport listData from '../../mock/listData.json'\n\nconst connection = mysql.createConnection({\n    host: 'localhost',\n    port: 3306,\n    user: 'root',\n    password: '123456',\n    database: 'dcxt',\n    insecureAuth: true\n});\n\nconnection.connect( err => {\n    if(err) {\n        throw err;\n    }\n});\n\nconst userLogin = (info, cb) => {\n    connection.query('select * from user where userName=?', [info.userName], (err, result) => {\n        if(result.length !== 0) {\n            if(result[0].password === info.password) {\n                cb({\n                    code: 1,\n                    personage: result[0],\n                    msg: '登陆成功',\n                })\n            } else {\n                cb({\n                    code: 0,\n                    msg: '密码错误'\n                })\n            }\n        } else {\n            cb({\n                code: 2,\n                msg: '用户名不存在请注册'\n            })\n        }\n    })\n};\n\nconst Logon = (info, cb) => {\n    connection.query('select * from user where userName=?', [info.nickname], (err, result) => {\n       if(result.length === 0){\n           connection.query(`insert into user (userName,password,email,phone) values (?,?,?,?)`, [info.nickname,info.password,info.email,info.phone] , (err, result) => {\n               cb({\n                   code: 1,\n                   msg: '注册成功'\n               })\n           })\n       }  else {\n           cb({\n               code: 0,\n               msg: '用户名重复请重新注册'\n           })\n       }\n    });\n};\n\nconst details = (payload, cb) => {\n  cb({\n    uid: payload.uid,\n    name: payload.name,\n    listData\n  })\n};\n\nexport {\n    userLogin,\n    Logon,\n    details\n}\n"]}
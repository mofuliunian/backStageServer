{"version":3,"sources":["../../src/config/tools.js"],"names":["exceed","getCipher","str","cipher","createCipher","enc","update","final","getDecipher","decipher","createDecipher","crypted","authentication","req","res","next","headers","token","url","firstTime","Date","getTime","body","userName","nowTime","reg","RegExp","replace","time","split","json","code","msg","redirect"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,SAAS,IAAf;;AAEA,IAAMC,YAAY,SAAZA,SAAY,CAACC,GAAD,EAAS;AACzB,MAAMC,SAAS,iBAAOC,YAAP,CAAoB,QAApB,EAA8B,OAA9B,CAAf;AACA,MAAIC,MAAMF,OAAOG,MAAP,CAAcJ,GAAd,EAAmB,OAAnB,EAA4B,KAA5B,CAAV;AACAG,SAAOF,OAAOI,KAAP,CAAa,KAAb,CAAP;AACA,SAAOF,GAAP;AACD,CALD;;AAOA,IAAMG,cAAc,SAAdA,WAAc,CAACN,GAAD,EAAS;AAC3B,MAAMO,WAAW,iBAAOC,cAAP,CAAsB,QAAtB,EAAgC,OAAhC,CAAjB;AACA,MAAIC,UAAUF,SAASH,MAAT,CAAgBJ,GAAhB,EAAqB,KAArB,EAA4B,OAA5B,CAAd;AACAS,aAAWF,SAASF,KAAT,CAAe,OAAf,CAAX;AACA,SAAOI,OAAP;AACD,CALD;;AAOA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzC,MAAIF,IAAIG,OAAJ,CAAYC,KAAZ,KAAsB,EAAtB,IAA4BJ,IAAIK,GAAJ,KAAY,QAA5C,EAAsD;AACpD,QAAMC,YAAY,CAAC,EAAE,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAzB,CAAnB;AACAR,QAAIG,OAAJ,CAAYC,KAAZ,GAAoBhB,UAAaY,IAAIS,IAAJ,CAASC,QAAtB,SAAkCJ,SAAlC,CAApB;AACAJ;AACD,GAJD,MAIO;AACL,QAAMS,UAAU,CAAC,EAAE,IAAIJ,IAAJ,GAAWC,OAAX,KAAuB,IAAzB,CAAjB;AACA,QAAMI,MAAM,IAAIC,MAAJ,CAAW,GAAX,EAAe,GAAf,CAAZ;AACAb,QAAIG,OAAJ,CAAYC,KAAZ,GAAoBJ,IAAIG,OAAJ,CAAYC,KAAZ,CAAkBU,OAAlB,CAA0BF,GAA1B,EAA8B,EAA9B,CAApB;AACA,QAAMG,OAAOpB,YAAYK,IAAIG,OAAJ,CAAYC,KAAxB,EAA+BY,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,CAAb;AACA,QAAIL,UAAUI,IAAV,IAAkB5B,MAAtB,EAA8B;AAC5Bc,UAAIgB,IAAJ,CAAS;AACPC,cAAM,CADC;AAEPC,aAAK,WAFE;AAGPC,kBAAU;AAHH,OAAT;AAKD,KAND,MAMO;AACLlB;AACD;AACF;AACF,CApBD;;QAuBEd,S,GAAAA,S;QACAO,W,GAAAA,W;QACAI,c,GAAAA,c","file":"tools.js","sourcesContent":["import crypto from 'crypto';\n\nconst exceed = 7200;\n\nconst getCipher = (str) => {\n  const cipher = crypto.createCipher('aes256', 'admin');\n  let enc = cipher.update(str, 'utf-8', 'hex');\n  enc += cipher.final('hex');\n  return enc\n};\n\nconst getDecipher = (str) => {\n  const decipher = crypto.createDecipher('aes256', 'admin');\n  let crypted = decipher.update(str, 'hex', 'utf-8');\n  crypted += decipher.final('utf-8');\n  return crypted;\n};\n\nconst authentication = (req, res, next) => {\n  if (req.headers.token === '' || req.url === '/login') {\n    const firstTime = ~~(new Date().getTime() / 1000);\n    req.headers.token = getCipher(`${req.body.userName}&${firstTime}`);\n    next()\n  } else {\n    const nowTime = ~~(new Date().getTime() / 1000);\n    const reg = new RegExp('\"',\"g\");\n    req.headers.token = req.headers.token.replace(reg,\"\");\n    const time = getDecipher(req.headers.token).split('&')[1];\n    if (nowTime - time >= exceed) {\n      res.json({\n        code: 0,\n        msg: '鉴权失效请重新登陆',\n        redirect: '/api/login'\n      })\n    } else {\n      next()\n    }\n  }\n};\n\nexport {\n  getCipher,\n  getDecipher,\n  authentication\n}"]}